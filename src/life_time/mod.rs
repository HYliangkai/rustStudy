/** ## 生命周期
+ 生命周期是对引用数据的注解,是为了帮助rust编译器做更完善的编译
### 什么情况下需要做生命周期注解
1. 函数签名中入参中参数使用2个以上的引用,出参中使用一个以上的引用
譬如
```rust
fn need(pa:&i32,pb:&i32)->&str
```
2.定义结构体时属性是指针值时
```rust
struct Need{
  name:&str,
  age:i32
}
```
总结:什么情况下需要标注生命周期
-->当rust编译器无法明确判断指针数据的生命周期长度时,即生命周期判断存在歧义的时候
所以需要什么周期标注的情况:
+ 存在引入指针到作用域内的情况
+ 存在引出指针到作用域外的情况
+ 编译器报错的情况<废话>
 */

//生命周期注解表示生命周期的一致性,用 ' 做开头 ,跟在 & 后面
//代码提示甚至会告诉你如何保证什么周期的一致性
pub fn use_life_time<'a>(co: &'a str, de: &'a str) -> &'a str {
    return "123";
}

pub struct Alife<'a> {
    name: &'a str,
    age: &'a str,
}
